// Mario Cako
//July 19, 2019


// Welltok Code Challenge
// readme.txt
/*
 Comments about the project

 -Project created in Ubuntu 18.04.02 LTS and IntelliJ and Sublime
 
 -Used start.spring.io website to build me the maven project
  as this is the first project i work with spring framework and cassandra db.

- I was able to create the table in cassandra db though the 
  terminal command manually after many tries as the MINT OS was not able to run at all.

- When i try to build the application i get this error:
"Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured."

I have provided url on the properties but i could not get it to run.

The way i wanted to create the project was to use postman to send data through the local host
to the application, create the database manually through the terminal and when the application
received data, it would add it to the repository and then i would call a simple
select * command from the db and see all the entries.

The project is not finished, but i learned a lot in just a few days about spring framework
and dependency injection. I think i have the structure down but the only 
problem i have is with the configuration of the application.

*/


///////////////////////////////////////////////////////////
//DemoApplication.java 

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

}

///////////////////////////////////////////////////////////

// Controller.java

package Controller;

import Data.DataTable;
import Repository.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;


// Marks this class as the controller
@org.springframework.stereotype.Controller

@RestController
@RequestMapping("/cassandra")
public class Controller {

// controller communicates with endpoints for incoming messages

    @Autowired
    private Repository cassandraRepository;


    // insert data into repository
    @PostMapping
    public ResponseEntity<DataTable> insertDataToTable(@RequestBody DataTable dataTable) {
        DataTable savedData = cassandraRepository.save(dataTable);
        return new ResponseEntity<>(savedData, HttpStatus.OK);
    }

    @GetMapping(path = "{id}")
    public ResponseEntity<DataTable> getDataFromTable(@PathVariable("id") int id) {
        Optional<DataTable> getData = cassandraRepository.findById(id);
        if (getData.isPresent()) {
            // exception
        }
        return new ResponseEntity<>(getData.get(), HttpStatus.OK);

    }
}

///////////////////////////////////////////////////////////////
// Data.java

package Data;

import org.springframework.data.cassandra.core.cql.PrimaryKeyType;
import org.springframework.data.cassandra.core.mapping.Column;
import org.springframework.data.cassandra.core.mapping.PrimaryKeyColumn;
import org.springframework.data.cassandra.core.mapping.Table;

import java.io.Serializable;
import java.util.Date;

//
@Table("data_table")

public class DataTable implements Serializable {


    // Table fields
    // id, tittle, description, author, tags, created_at, updated_at

    // creating KEYSPACE on cassandra

    // cqlsh> CREATE KEYSPACE spring_cassandra WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 3};

    // verify KEYSPACE with
    // cqlsh> DESCRIBE keyspaces

    // select KEYSPACE you want to work
    // cqlsh> USE spring_cassandra

    // create data table for our demo
    // CREATE TABLE data( id int PRIMARY KEY, tittle text, description text, author text, tags text, created_at text,  updated_at text );


    // mapping columns from the table to corresponding data types
    @PrimaryKeyColumn(name = "id", ordinal = 0, type = PrimaryKeyType.PARTITIONED)
    @Column("id")
    private int id;

    @Column("tittle")
    private String tittle;

    @Column("description")
    private String description;

    @Column("author")
    private String author;

    @Column("tags")
    private String tags;

    @Column("created_at")
    private Date created_at;

    @Column("updated_at")
    private Date updated_at;


    // Get and set methods for data arguments
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getTittle() {
        return tittle;
    }

    public void setTittle(String tittle) {
        this.tittle = tittle;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(Date created_at) {
        this.created_at = created_at;
    }

    public Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(Date updated_at) {
        this.updated_at = updated_at;
    }
}

/////////////////////////////////////////////////////////////////////

//Repository.java
package Repository;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

import Data.DataTable;
import org.springframework.data.repository.CrudRepository;

@org.springframework.stereotype.Repository
public interface Repository extends CrudRepository<DataTable, Serializable> {


    Optional<DataTable> findById(int id);


}

//////////////////////////////////////////////////////////////////

//ServiceImpl.java
package Repository;

import Data.DataTable;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public abstract class ServiceImpl implements Repository {

    private Repository repo;


    public ServiceImpl(Repository repository){
        this.repo=repository;
    }


    public Optional<DataTable> findById(int id) {
        return repo.findById(id);
    }

    @Override
    public <S extends DataTable> S save(S s) {
        repo.save(s);
        return null;
    }


    public List<DataTable> listAll(){
        List<DataTable> data  = new ArrayList<>();
        repo.findAll().forEach(data::add);
        return data;
    }


//    public void delete(int id){
//        repo.delete(id);
//    }

// other methods to create
}

/////////////////////////////////////////////////////////////////////

//application.properties
# spring.datasource.url=http://localhost:9042
# spring.datasource.username=cassandra
# spring.datasource.password=cassandra

/////////////////////////////////////////////////////////////
